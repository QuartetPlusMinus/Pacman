// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef PROTOBUF_service_2eproto__INCLUDED
#define PROTOBUF_service_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_service_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPointImpl();
void InitDefaultsPoint();
void InitDefaultsBeingInitImpl();
void InitDefaultsBeingInit();
void InitDefaultsBeingImpl();
void InitDefaultsBeing();
void InitDefaultsConnectRequestImpl();
void InitDefaultsConnectRequest();
void InitDefaultsConnectReplyImpl();
void InitDefaultsConnectReply();
void InitDefaultsStartRequestImpl();
void InitDefaultsStartRequest();
void InitDefaultsStartReplyImpl();
void InitDefaultsStartReply();
void InitDefaultsIterationRequestImpl();
void InitDefaultsIterationRequest();
void InitDefaultsIterationReplyImpl();
void InitDefaultsIterationReply();
void InitDefaultsEndRequestImpl();
void InitDefaultsEndRequest();
void InitDefaultsEndReplyImpl();
void InitDefaultsEndReply();
inline void InitDefaults() {
  InitDefaultsPoint();
  InitDefaultsBeingInit();
  InitDefaultsBeing();
  InitDefaultsConnectRequest();
  InitDefaultsConnectReply();
  InitDefaultsStartRequest();
  InitDefaultsStartReply();
  InitDefaultsIterationRequest();
  InitDefaultsIterationReply();
  InitDefaultsEndRequest();
  InitDefaultsEndReply();
}
}  // namespace protobuf_service_2eproto
namespace pacman_service {
class Being;
class BeingDefaultTypeInternal;
extern BeingDefaultTypeInternal _Being_default_instance_;
class BeingInit;
class BeingInitDefaultTypeInternal;
extern BeingInitDefaultTypeInternal _BeingInit_default_instance_;
class ConnectReply;
class ConnectReplyDefaultTypeInternal;
extern ConnectReplyDefaultTypeInternal _ConnectReply_default_instance_;
class ConnectRequest;
class ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class EndReply;
class EndReplyDefaultTypeInternal;
extern EndReplyDefaultTypeInternal _EndReply_default_instance_;
class EndRequest;
class EndRequestDefaultTypeInternal;
extern EndRequestDefaultTypeInternal _EndRequest_default_instance_;
class IterationReply;
class IterationReplyDefaultTypeInternal;
extern IterationReplyDefaultTypeInternal _IterationReply_default_instance_;
class IterationRequest;
class IterationRequestDefaultTypeInternal;
extern IterationRequestDefaultTypeInternal _IterationRequest_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class StartReply;
class StartReplyDefaultTypeInternal;
extern StartReplyDefaultTypeInternal _StartReply_default_instance_;
class StartRequest;
class StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
}  // namespace pacman_service
namespace pacman_service {

enum Direction {
  UP = 0,
  RIGHT = 1,
  DOWN = 2,
  LEFT = 3,
  Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Direction_IsValid(int value);
const Direction Direction_MIN = UP;
const Direction Direction_MAX = LEFT;
const int Direction_ARRAYSIZE = Direction_MAX + 1;

const ::google::protobuf::EnumDescriptor* Direction_descriptor();
inline const ::std::string& Direction_Name(Direction value) {
  return ::google::protobuf::internal::NameOfEnum(
    Direction_descriptor(), value);
}
inline bool Direction_Parse(
    const ::std::string& name, Direction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Direction>(
    Direction_descriptor(), name, value);
}
enum BeingType {
  PACMAN = 0,
  GHOST = 1,
  BeingType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BeingType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BeingType_IsValid(int value);
const BeingType BeingType_MIN = PACMAN;
const BeingType BeingType_MAX = GHOST;
const int BeingType_ARRAYSIZE = BeingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BeingType_descriptor();
inline const ::std::string& BeingType_Name(BeingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BeingType_descriptor(), value);
}
inline bool BeingType_Parse(
    const ::std::string& name, BeingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BeingType>(
    BeingType_descriptor(), name, value);
}
enum BeingStatus {
  KILLED = 0,
  ALIVE = 1,
  DYING = 2,
  BeingStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BeingStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BeingStatus_IsValid(int value);
const BeingStatus BeingStatus_MIN = KILLED;
const BeingStatus BeingStatus_MAX = DYING;
const int BeingStatus_ARRAYSIZE = BeingStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* BeingStatus_descriptor();
inline const ::std::string& BeingStatus_Name(BeingStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    BeingStatus_descriptor(), value);
}
inline bool BeingStatus_Parse(
    const ::std::string& name, BeingStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BeingStatus>(
    BeingStatus_descriptor(), name, value);
}
// ===================================================================

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pacman_service.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const PROTOBUF_FINAL { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pacman_service.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsPointImpl();
};
// -------------------------------------------------------------------

class BeingInit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pacman_service.BeingInit) */ {
 public:
  BeingInit();
  virtual ~BeingInit();

  BeingInit(const BeingInit& from);

  inline BeingInit& operator=(const BeingInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeingInit(BeingInit&& from) noexcept
    : BeingInit() {
    *this = ::std::move(from);
  }

  inline BeingInit& operator=(BeingInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BeingInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeingInit* internal_default_instance() {
    return reinterpret_cast<const BeingInit*>(
               &_BeingInit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BeingInit* other);
  friend void swap(BeingInit& a, BeingInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeingInit* New() const PROTOBUF_FINAL { return New(NULL); }

  BeingInit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BeingInit& from);
  void MergeFrom(const BeingInit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BeingInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .pacman_service.Being data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::pacman_service::Being& data() const;
  ::pacman_service::Being* release_data();
  ::pacman_service::Being* mutable_data();
  void set_allocated_data(::pacman_service::Being* data);

  // .pacman_service.BeingType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::pacman_service::BeingType type() const;
  void set_type(::pacman_service::BeingType value);

  // @@protoc_insertion_point(class_scope:pacman_service.BeingInit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::pacman_service::Being* data_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsBeingInitImpl();
};
// -------------------------------------------------------------------

class Being : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pacman_service.Being) */ {
 public:
  Being();
  virtual ~Being();

  Being(const Being& from);

  inline Being& operator=(const Being& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Being(Being&& from) noexcept
    : Being() {
    *this = ::std::move(from);
  }

  inline Being& operator=(Being&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Being& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Being* internal_default_instance() {
    return reinterpret_cast<const Being*>(
               &_Being_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Being* other);
  friend void swap(Being& a, Being& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Being* New() const PROTOBUF_FINAL { return New(NULL); }

  Being* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Being& from);
  void MergeFrom(const Being& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Being* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pacman_service.Point pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  const ::pacman_service::Point& pos() const;
  ::pacman_service::Point* release_pos();
  ::pacman_service::Point* mutable_pos();
  void set_allocated_pos(::pacman_service::Point* pos);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // .pacman_service.Direction direction = 3;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  ::pacman_service::Direction direction() const;
  void set_direction(::pacman_service::Direction value);

  // .pacman_service.BeingStatus status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::pacman_service::BeingStatus status() const;
  void set_status(::pacman_service::BeingStatus value);

  // @@protoc_insertion_point(class_scope:pacman_service.Being)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pacman_service::Point* pos_;
  ::google::protobuf::int32 id_;
  int direction_;
  int status_;
  mutable int _cached_size_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsBeingImpl();
};
// -------------------------------------------------------------------

class ConnectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pacman_service.ConnectRequest) */ {
 public:
  ConnectRequest();
  virtual ~ConnectRequest();

  ConnectRequest(const ConnectRequest& from);

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectRequest(ConnectRequest&& from) noexcept
    : ConnectRequest() {
    *this = ::std::move(from);
  }

  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
               &_ConnectRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ConnectRequest* other);
  friend void swap(ConnectRequest& a, ConnectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectRequest& from);
  void MergeFrom(const ConnectRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pacman_service.ConnectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsConnectRequestImpl();
};
// -------------------------------------------------------------------

class ConnectReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pacman_service.ConnectReply) */ {
 public:
  ConnectReply();
  virtual ~ConnectReply();

  ConnectReply(const ConnectReply& from);

  inline ConnectReply& operator=(const ConnectReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectReply(ConnectReply&& from) noexcept
    : ConnectReply() {
    *this = ::std::move(from);
  }

  inline ConnectReply& operator=(ConnectReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectReply* internal_default_instance() {
    return reinterpret_cast<const ConnectReply*>(
               &_ConnectReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ConnectReply* other);
  friend void swap(ConnectReply& a, ConnectReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectReply* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectReply& from);
  void MergeFrom(const ConnectReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pacman_service.ConnectReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsConnectReplyImpl();
};
// -------------------------------------------------------------------

class StartRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pacman_service.StartRequest) */ {
 public:
  StartRequest();
  virtual ~StartRequest();

  StartRequest(const StartRequest& from);

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(StartRequest* other);
  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StartRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartRequest& from);
  void MergeFrom(const StartRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pacman_service.StartRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsStartRequestImpl();
};
// -------------------------------------------------------------------

class StartReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pacman_service.StartReply) */ {
 public:
  StartReply();
  virtual ~StartReply();

  StartReply(const StartReply& from);

  inline StartReply& operator=(const StartReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartReply(StartReply&& from) noexcept
    : StartReply() {
    *this = ::std::move(from);
  }

  inline StartReply& operator=(StartReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartReply* internal_default_instance() {
    return reinterpret_cast<const StartReply*>(
               &_StartReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(StartReply* other);
  friend void swap(StartReply& a, StartReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartReply* New() const PROTOBUF_FINAL { return New(NULL); }

  StartReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartReply& from);
  void MergeFrom(const StartReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pacman_service.BeingInit being = 2;
  int being_size() const;
  void clear_being();
  static const int kBeingFieldNumber = 2;
  const ::pacman_service::BeingInit& being(int index) const;
  ::pacman_service::BeingInit* mutable_being(int index);
  ::pacman_service::BeingInit* add_being();
  ::google::protobuf::RepeatedPtrField< ::pacman_service::BeingInit >*
      mutable_being();
  const ::google::protobuf::RepeatedPtrField< ::pacman_service::BeingInit >&
      being() const;

  // int32 time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pacman_service.StartReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pacman_service::BeingInit > being_;
  ::google::protobuf::int32 time_;
  mutable int _cached_size_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsStartReplyImpl();
};
// -------------------------------------------------------------------

class IterationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pacman_service.IterationRequest) */ {
 public:
  IterationRequest();
  virtual ~IterationRequest();

  IterationRequest(const IterationRequest& from);

  inline IterationRequest& operator=(const IterationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IterationRequest(IterationRequest&& from) noexcept
    : IterationRequest() {
    *this = ::std::move(from);
  }

  inline IterationRequest& operator=(IterationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IterationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IterationRequest* internal_default_instance() {
    return reinterpret_cast<const IterationRequest*>(
               &_IterationRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(IterationRequest* other);
  friend void swap(IterationRequest& a, IterationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IterationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  IterationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IterationRequest& from);
  void MergeFrom(const IterationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IterationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // .pacman_service.Direction direction = 2;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  ::pacman_service::Direction direction() const;
  void set_direction(::pacman_service::Direction value);

  // @@protoc_insertion_point(class_scope:pacman_service.IterationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  int direction_;
  mutable int _cached_size_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsIterationRequestImpl();
};
// -------------------------------------------------------------------

class IterationReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pacman_service.IterationReply) */ {
 public:
  IterationReply();
  virtual ~IterationReply();

  IterationReply(const IterationReply& from);

  inline IterationReply& operator=(const IterationReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IterationReply(IterationReply&& from) noexcept
    : IterationReply() {
    *this = ::std::move(from);
  }

  inline IterationReply& operator=(IterationReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IterationReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IterationReply* internal_default_instance() {
    return reinterpret_cast<const IterationReply*>(
               &_IterationReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(IterationReply* other);
  friend void swap(IterationReply& a, IterationReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IterationReply* New() const PROTOBUF_FINAL { return New(NULL); }

  IterationReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IterationReply& from);
  void MergeFrom(const IterationReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IterationReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pacman_service.Being being = 2;
  int being_size() const;
  void clear_being();
  static const int kBeingFieldNumber = 2;
  const ::pacman_service::Being& being(int index) const;
  ::pacman_service::Being* mutable_being(int index);
  ::pacman_service::Being* add_being();
  ::google::protobuf::RepeatedPtrField< ::pacman_service::Being >*
      mutable_being();
  const ::google::protobuf::RepeatedPtrField< ::pacman_service::Being >&
      being() const;

  // int32 health = 1;
  void clear_health();
  static const int kHealthFieldNumber = 1;
  ::google::protobuf::int32 health() const;
  void set_health(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pacman_service.IterationReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pacman_service::Being > being_;
  ::google::protobuf::int32 health_;
  mutable int _cached_size_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsIterationReplyImpl();
};
// -------------------------------------------------------------------

class EndRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pacman_service.EndRequest) */ {
 public:
  EndRequest();
  virtual ~EndRequest();

  EndRequest(const EndRequest& from);

  inline EndRequest& operator=(const EndRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EndRequest(EndRequest&& from) noexcept
    : EndRequest() {
    *this = ::std::move(from);
  }

  inline EndRequest& operator=(EndRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EndRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndRequest* internal_default_instance() {
    return reinterpret_cast<const EndRequest*>(
               &_EndRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(EndRequest* other);
  friend void swap(EndRequest& a, EndRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  EndRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EndRequest& from);
  void MergeFrom(const EndRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EndRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pacman_service.EndRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsEndRequestImpl();
};
// -------------------------------------------------------------------

class EndReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pacman_service.EndReply) */ {
 public:
  EndReply();
  virtual ~EndReply();

  EndReply(const EndReply& from);

  inline EndReply& operator=(const EndReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EndReply(EndReply&& from) noexcept
    : EndReply() {
    *this = ::std::move(from);
  }

  inline EndReply& operator=(EndReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EndReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndReply* internal_default_instance() {
    return reinterpret_cast<const EndReply*>(
               &_EndReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(EndReply* other);
  friend void swap(EndReply& a, EndReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndReply* New() const PROTOBUF_FINAL { return New(NULL); }

  EndReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EndReply& from);
  void MergeFrom(const EndReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EndReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pacman_service.EndReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsEndReplyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// int32 x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:pacman_service.Point.x)
  return x_;
}
inline void Point::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:pacman_service.Point.x)
}

// int32 y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:pacman_service.Point.y)
  return y_;
}
inline void Point::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:pacman_service.Point.y)
}

// -------------------------------------------------------------------

// BeingInit

// .pacman_service.BeingType type = 1;
inline void BeingInit::clear_type() {
  type_ = 0;
}
inline ::pacman_service::BeingType BeingInit::type() const {
  // @@protoc_insertion_point(field_get:pacman_service.BeingInit.type)
  return static_cast< ::pacman_service::BeingType >(type_);
}
inline void BeingInit::set_type(::pacman_service::BeingType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pacman_service.BeingInit.type)
}

// string name = 2;
inline void BeingInit::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BeingInit::name() const {
  // @@protoc_insertion_point(field_get:pacman_service.BeingInit.name)
  return name_.GetNoArena();
}
inline void BeingInit::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pacman_service.BeingInit.name)
}
#if LANG_CXX11
inline void BeingInit::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pacman_service.BeingInit.name)
}
#endif
inline void BeingInit::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pacman_service.BeingInit.name)
}
inline void BeingInit::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pacman_service.BeingInit.name)
}
inline ::std::string* BeingInit::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pacman_service.BeingInit.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeingInit::release_name() {
  // @@protoc_insertion_point(field_release:pacman_service.BeingInit.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeingInit::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pacman_service.BeingInit.name)
}

// .pacman_service.Being data = 3;
inline bool BeingInit::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void BeingInit::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::pacman_service::Being& BeingInit::data() const {
  const ::pacman_service::Being* p = data_;
  // @@protoc_insertion_point(field_get:pacman_service.BeingInit.data)
  return p != NULL ? *p : *reinterpret_cast<const ::pacman_service::Being*>(
      &::pacman_service::_Being_default_instance_);
}
inline ::pacman_service::Being* BeingInit::release_data() {
  // @@protoc_insertion_point(field_release:pacman_service.BeingInit.data)
  
  ::pacman_service::Being* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::pacman_service::Being* BeingInit::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::pacman_service::Being;
  }
  // @@protoc_insertion_point(field_mutable:pacman_service.BeingInit.data)
  return data_;
}
inline void BeingInit::set_allocated_data(::pacman_service::Being* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:pacman_service.BeingInit.data)
}

// -------------------------------------------------------------------

// Being

// int32 id = 1;
inline void Being::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Being::id() const {
  // @@protoc_insertion_point(field_get:pacman_service.Being.id)
  return id_;
}
inline void Being::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pacman_service.Being.id)
}

// .pacman_service.Point pos = 2;
inline bool Being::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void Being::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
}
inline const ::pacman_service::Point& Being::pos() const {
  const ::pacman_service::Point* p = pos_;
  // @@protoc_insertion_point(field_get:pacman_service.Being.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::pacman_service::Point*>(
      &::pacman_service::_Point_default_instance_);
}
inline ::pacman_service::Point* Being::release_pos() {
  // @@protoc_insertion_point(field_release:pacman_service.Being.pos)
  
  ::pacman_service::Point* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::pacman_service::Point* Being::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::pacman_service::Point;
  }
  // @@protoc_insertion_point(field_mutable:pacman_service.Being.pos)
  return pos_;
}
inline void Being::set_allocated_pos(::pacman_service::Point* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:pacman_service.Being.pos)
}

// .pacman_service.Direction direction = 3;
inline void Being::clear_direction() {
  direction_ = 0;
}
inline ::pacman_service::Direction Being::direction() const {
  // @@protoc_insertion_point(field_get:pacman_service.Being.direction)
  return static_cast< ::pacman_service::Direction >(direction_);
}
inline void Being::set_direction(::pacman_service::Direction value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:pacman_service.Being.direction)
}

// .pacman_service.BeingStatus status = 4;
inline void Being::clear_status() {
  status_ = 0;
}
inline ::pacman_service::BeingStatus Being::status() const {
  // @@protoc_insertion_point(field_get:pacman_service.Being.status)
  return static_cast< ::pacman_service::BeingStatus >(status_);
}
inline void Being::set_status(::pacman_service::BeingStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:pacman_service.Being.status)
}

// -------------------------------------------------------------------

// ConnectRequest

// string name = 1;
inline void ConnectRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectRequest::name() const {
  // @@protoc_insertion_point(field_get:pacman_service.ConnectRequest.name)
  return name_.GetNoArena();
}
inline void ConnectRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pacman_service.ConnectRequest.name)
}
#if LANG_CXX11
inline void ConnectRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pacman_service.ConnectRequest.name)
}
#endif
inline void ConnectRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pacman_service.ConnectRequest.name)
}
inline void ConnectRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pacman_service.ConnectRequest.name)
}
inline ::std::string* ConnectRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pacman_service.ConnectRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectRequest::release_name() {
  // @@protoc_insertion_point(field_release:pacman_service.ConnectRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pacman_service.ConnectRequest.name)
}

// -------------------------------------------------------------------

// ConnectReply

// int32 id = 1;
inline void ConnectReply::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ConnectReply::id() const {
  // @@protoc_insertion_point(field_get:pacman_service.ConnectReply.id)
  return id_;
}
inline void ConnectReply::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pacman_service.ConnectReply.id)
}

// -------------------------------------------------------------------

// StartRequest

// int32 id = 1;
inline void StartRequest::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 StartRequest::id() const {
  // @@protoc_insertion_point(field_get:pacman_service.StartRequest.id)
  return id_;
}
inline void StartRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pacman_service.StartRequest.id)
}

// -------------------------------------------------------------------

// StartReply

// int32 time = 1;
inline void StartReply::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 StartReply::time() const {
  // @@protoc_insertion_point(field_get:pacman_service.StartReply.time)
  return time_;
}
inline void StartReply::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:pacman_service.StartReply.time)
}

// repeated .pacman_service.BeingInit being = 2;
inline int StartReply::being_size() const {
  return being_.size();
}
inline void StartReply::clear_being() {
  being_.Clear();
}
inline const ::pacman_service::BeingInit& StartReply::being(int index) const {
  // @@protoc_insertion_point(field_get:pacman_service.StartReply.being)
  return being_.Get(index);
}
inline ::pacman_service::BeingInit* StartReply::mutable_being(int index) {
  // @@protoc_insertion_point(field_mutable:pacman_service.StartReply.being)
  return being_.Mutable(index);
}
inline ::pacman_service::BeingInit* StartReply::add_being() {
  // @@protoc_insertion_point(field_add:pacman_service.StartReply.being)
  return being_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pacman_service::BeingInit >*
StartReply::mutable_being() {
  // @@protoc_insertion_point(field_mutable_list:pacman_service.StartReply.being)
  return &being_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pacman_service::BeingInit >&
StartReply::being() const {
  // @@protoc_insertion_point(field_list:pacman_service.StartReply.being)
  return being_;
}

// -------------------------------------------------------------------

// IterationRequest

// int32 id = 1;
inline void IterationRequest::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 IterationRequest::id() const {
  // @@protoc_insertion_point(field_get:pacman_service.IterationRequest.id)
  return id_;
}
inline void IterationRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pacman_service.IterationRequest.id)
}

// .pacman_service.Direction direction = 2;
inline void IterationRequest::clear_direction() {
  direction_ = 0;
}
inline ::pacman_service::Direction IterationRequest::direction() const {
  // @@protoc_insertion_point(field_get:pacman_service.IterationRequest.direction)
  return static_cast< ::pacman_service::Direction >(direction_);
}
inline void IterationRequest::set_direction(::pacman_service::Direction value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:pacman_service.IterationRequest.direction)
}

// -------------------------------------------------------------------

// IterationReply

// int32 health = 1;
inline void IterationReply::clear_health() {
  health_ = 0;
}
inline ::google::protobuf::int32 IterationReply::health() const {
  // @@protoc_insertion_point(field_get:pacman_service.IterationReply.health)
  return health_;
}
inline void IterationReply::set_health(::google::protobuf::int32 value) {
  
  health_ = value;
  // @@protoc_insertion_point(field_set:pacman_service.IterationReply.health)
}

// repeated .pacman_service.Being being = 2;
inline int IterationReply::being_size() const {
  return being_.size();
}
inline void IterationReply::clear_being() {
  being_.Clear();
}
inline const ::pacman_service::Being& IterationReply::being(int index) const {
  // @@protoc_insertion_point(field_get:pacman_service.IterationReply.being)
  return being_.Get(index);
}
inline ::pacman_service::Being* IterationReply::mutable_being(int index) {
  // @@protoc_insertion_point(field_mutable:pacman_service.IterationReply.being)
  return being_.Mutable(index);
}
inline ::pacman_service::Being* IterationReply::add_being() {
  // @@protoc_insertion_point(field_add:pacman_service.IterationReply.being)
  return being_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pacman_service::Being >*
IterationReply::mutable_being() {
  // @@protoc_insertion_point(field_mutable_list:pacman_service.IterationReply.being)
  return &being_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pacman_service::Being >&
IterationReply::being() const {
  // @@protoc_insertion_point(field_list:pacman_service.IterationReply.being)
  return being_;
}

// -------------------------------------------------------------------

// EndRequest

// -------------------------------------------------------------------

// EndReply

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pacman_service

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pacman_service::Direction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pacman_service::Direction>() {
  return ::pacman_service::Direction_descriptor();
}
template <> struct is_proto_enum< ::pacman_service::BeingType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pacman_service::BeingType>() {
  return ::pacman_service::BeingType_descriptor();
}
template <> struct is_proto_enum< ::pacman_service::BeingStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pacman_service::BeingStatus>() {
  return ::pacman_service::BeingStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2eproto__INCLUDED
