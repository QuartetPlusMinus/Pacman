// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto
#ifndef GRPC_service_2eproto__INCLUDED
#define GRPC_service_2eproto__INCLUDED

#include "service.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace pacman_service {

class PlayerConnection final {
 public:
  static constexpr char const* service_full_name() {
    return "pacman_service.PlayerConnection";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Connect(::grpc::ClientContext* context, const ::pacman_service::ConnectRequest& request, ::pacman_service::ConnectReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::ConnectReply>> AsyncConnect(::grpc::ClientContext* context, const ::pacman_service::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::ConnectReply>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::ConnectReply>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::pacman_service::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::ConnectReply>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    virtual ::grpc::Status Start(::grpc::ClientContext* context, const ::pacman_service::StartRequest& request, ::pacman_service::StartReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::StartReply>> AsyncStart(::grpc::ClientContext* context, const ::pacman_service::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::StartReply>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::StartReply>> PrepareAsyncStart(::grpc::ClientContext* context, const ::pacman_service::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::StartReply>>(PrepareAsyncStartRaw(context, request, cq));
    }
    virtual ::grpc::Status Iteration(::grpc::ClientContext* context, const ::pacman_service::IterationRequest& request, ::pacman_service::IterationReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::IterationReply>> AsyncIteration(::grpc::ClientContext* context, const ::pacman_service::IterationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::IterationReply>>(AsyncIterationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::IterationReply>> PrepareAsyncIteration(::grpc::ClientContext* context, const ::pacman_service::IterationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::IterationReply>>(PrepareAsyncIterationRaw(context, request, cq));
    }
    virtual ::grpc::Status End(::grpc::ClientContext* context, const ::pacman_service::EndRequest& request, ::pacman_service::EndReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::EndReply>> AsyncEnd(::grpc::ClientContext* context, const ::pacman_service::EndRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::EndReply>>(AsyncEndRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::EndReply>> PrepareAsyncEnd(::grpc::ClientContext* context, const ::pacman_service::EndRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::EndReply>>(PrepareAsyncEndRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::ConnectReply>* AsyncConnectRaw(::grpc::ClientContext* context, const ::pacman_service::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::ConnectReply>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::pacman_service::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::StartReply>* AsyncStartRaw(::grpc::ClientContext* context, const ::pacman_service::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::StartReply>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::pacman_service::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::IterationReply>* AsyncIterationRaw(::grpc::ClientContext* context, const ::pacman_service::IterationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::IterationReply>* PrepareAsyncIterationRaw(::grpc::ClientContext* context, const ::pacman_service::IterationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::EndReply>* AsyncEndRaw(::grpc::ClientContext* context, const ::pacman_service::EndRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pacman_service::EndReply>* PrepareAsyncEndRaw(::grpc::ClientContext* context, const ::pacman_service::EndRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Connect(::grpc::ClientContext* context, const ::pacman_service::ConnectRequest& request, ::pacman_service::ConnectReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::ConnectReply>> AsyncConnect(::grpc::ClientContext* context, const ::pacman_service::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::ConnectReply>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::ConnectReply>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::pacman_service::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::ConnectReply>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    ::grpc::Status Start(::grpc::ClientContext* context, const ::pacman_service::StartRequest& request, ::pacman_service::StartReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::StartReply>> AsyncStart(::grpc::ClientContext* context, const ::pacman_service::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::StartReply>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::StartReply>> PrepareAsyncStart(::grpc::ClientContext* context, const ::pacman_service::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::StartReply>>(PrepareAsyncStartRaw(context, request, cq));
    }
    ::grpc::Status Iteration(::grpc::ClientContext* context, const ::pacman_service::IterationRequest& request, ::pacman_service::IterationReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::IterationReply>> AsyncIteration(::grpc::ClientContext* context, const ::pacman_service::IterationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::IterationReply>>(AsyncIterationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::IterationReply>> PrepareAsyncIteration(::grpc::ClientContext* context, const ::pacman_service::IterationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::IterationReply>>(PrepareAsyncIterationRaw(context, request, cq));
    }
    ::grpc::Status End(::grpc::ClientContext* context, const ::pacman_service::EndRequest& request, ::pacman_service::EndReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::EndReply>> AsyncEnd(::grpc::ClientContext* context, const ::pacman_service::EndRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::EndReply>>(AsyncEndRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::EndReply>> PrepareAsyncEnd(::grpc::ClientContext* context, const ::pacman_service::EndRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pacman_service::EndReply>>(PrepareAsyncEndRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::pacman_service::ConnectReply>* AsyncConnectRaw(::grpc::ClientContext* context, const ::pacman_service::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pacman_service::ConnectReply>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::pacman_service::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pacman_service::StartReply>* AsyncStartRaw(::grpc::ClientContext* context, const ::pacman_service::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pacman_service::StartReply>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::pacman_service::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pacman_service::IterationReply>* AsyncIterationRaw(::grpc::ClientContext* context, const ::pacman_service::IterationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pacman_service::IterationReply>* PrepareAsyncIterationRaw(::grpc::ClientContext* context, const ::pacman_service::IterationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pacman_service::EndReply>* AsyncEndRaw(::grpc::ClientContext* context, const ::pacman_service::EndRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pacman_service::EndReply>* PrepareAsyncEndRaw(::grpc::ClientContext* context, const ::pacman_service::EndRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_Connect_;
    const ::grpc::RpcMethod rpcmethod_Start_;
    const ::grpc::RpcMethod rpcmethod_Iteration_;
    const ::grpc::RpcMethod rpcmethod_End_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Connect(::grpc::ServerContext* context, const ::pacman_service::ConnectRequest* request, ::pacman_service::ConnectReply* response);
    virtual ::grpc::Status Start(::grpc::ServerContext* context, const ::pacman_service::StartRequest* request, ::pacman_service::StartReply* response);
    virtual ::grpc::Status Iteration(::grpc::ServerContext* context, const ::pacman_service::IterationRequest* request, ::pacman_service::IterationReply* response);
    virtual ::grpc::Status End(::grpc::ServerContext* context, const ::pacman_service::EndRequest* request, ::pacman_service::EndReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Connect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, const ::pacman_service::ConnectRequest* request, ::pacman_service::ConnectReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::pacman_service::ConnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::pacman_service::ConnectReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Start() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* context, const ::pacman_service::StartRequest* request, ::pacman_service::StartReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::pacman_service::StartRequest* request, ::grpc::ServerAsyncResponseWriter< ::pacman_service::StartReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Iteration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Iteration() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Iteration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Iteration(::grpc::ServerContext* context, const ::pacman_service::IterationRequest* request, ::pacman_service::IterationReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIteration(::grpc::ServerContext* context, ::pacman_service::IterationRequest* request, ::grpc::ServerAsyncResponseWriter< ::pacman_service::IterationReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_End : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_End() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_End() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status End(::grpc::ServerContext* context, const ::pacman_service::EndRequest* request, ::pacman_service::EndReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnd(::grpc::ServerContext* context, ::pacman_service::EndRequest* request, ::grpc::ServerAsyncResponseWriter< ::pacman_service::EndReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Connect<WithAsyncMethod_Start<WithAsyncMethod_Iteration<WithAsyncMethod_End<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Connect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, const ::pacman_service::ConnectRequest* request, ::pacman_service::ConnectReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Start() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* context, const ::pacman_service::StartRequest* request, ::pacman_service::StartReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Iteration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Iteration() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Iteration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Iteration(::grpc::ServerContext* context, const ::pacman_service::IterationRequest* request, ::pacman_service::IterationReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_End : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_End() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_End() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status End(::grpc::ServerContext* context, const ::pacman_service::EndRequest* request, ::pacman_service::EndReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Connect() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::pacman_service::ConnectRequest, ::pacman_service::ConnectReply>(std::bind(&WithStreamedUnaryMethod_Connect<BaseClass>::StreamedConnect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Connect(::grpc::ServerContext* context, const ::pacman_service::ConnectRequest* request, ::pacman_service::ConnectReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pacman_service::ConnectRequest,::pacman_service::ConnectReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Start() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::pacman_service::StartRequest, ::pacman_service::StartReply>(std::bind(&WithStreamedUnaryMethod_Start<BaseClass>::StreamedStart, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Start(::grpc::ServerContext* context, const ::pacman_service::StartRequest* request, ::pacman_service::StartReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pacman_service::StartRequest,::pacman_service::StartReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Iteration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Iteration() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::pacman_service::IterationRequest, ::pacman_service::IterationReply>(std::bind(&WithStreamedUnaryMethod_Iteration<BaseClass>::StreamedIteration, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Iteration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Iteration(::grpc::ServerContext* context, const ::pacman_service::IterationRequest* request, ::pacman_service::IterationReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIteration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pacman_service::IterationRequest,::pacman_service::IterationReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_End : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_End() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::pacman_service::EndRequest, ::pacman_service::EndReply>(std::bind(&WithStreamedUnaryMethod_End<BaseClass>::StreamedEnd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_End() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status End(::grpc::ServerContext* context, const ::pacman_service::EndRequest* request, ::pacman_service::EndReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEnd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pacman_service::EndRequest,::pacman_service::EndReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Connect<WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Iteration<WithStreamedUnaryMethod_End<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Connect<WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Iteration<WithStreamedUnaryMethod_End<Service > > > > StreamedService;
};

}  // namespace pacman_service


#endif  // GRPC_service_2eproto__INCLUDED
