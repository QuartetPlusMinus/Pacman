// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace pacman_service {

static const char* PlayerConnection_method_names[] = {
  "/pacman_service.PlayerConnection/Connect",
  "/pacman_service.PlayerConnection/Start",
  "/pacman_service.PlayerConnection/Iteration",
  "/pacman_service.PlayerConnection/End",
};

std::unique_ptr< PlayerConnection::Stub> PlayerConnection::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< PlayerConnection::Stub> stub(new PlayerConnection::Stub(channel));
  return stub;
}

PlayerConnection::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Connect_(PlayerConnection_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Start_(PlayerConnection_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Iteration_(PlayerConnection_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_End_(PlayerConnection_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PlayerConnection::Stub::Connect(::grpc::ClientContext* context, const ::pacman_service::ConnectRequest& request, ::pacman_service::ConnectReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Connect_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pacman_service::ConnectReply>* PlayerConnection::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::pacman_service::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pacman_service::ConnectReply>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pacman_service::ConnectReply>* PlayerConnection::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::pacman_service::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pacman_service::ConnectReply>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, false);
}

::grpc::Status PlayerConnection::Stub::Start(::grpc::ClientContext* context, const ::pacman_service::StartRequest& request, ::pacman_service::StartReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Start_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pacman_service::StartReply>* PlayerConnection::Stub::AsyncStartRaw(::grpc::ClientContext* context, const ::pacman_service::StartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pacman_service::StartReply>::Create(channel_.get(), cq, rpcmethod_Start_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pacman_service::StartReply>* PlayerConnection::Stub::PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::pacman_service::StartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pacman_service::StartReply>::Create(channel_.get(), cq, rpcmethod_Start_, context, request, false);
}

::grpc::Status PlayerConnection::Stub::Iteration(::grpc::ClientContext* context, const ::pacman_service::IterationRequest& request, ::pacman_service::IterationReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Iteration_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pacman_service::IterationReply>* PlayerConnection::Stub::AsyncIterationRaw(::grpc::ClientContext* context, const ::pacman_service::IterationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pacman_service::IterationReply>::Create(channel_.get(), cq, rpcmethod_Iteration_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pacman_service::IterationReply>* PlayerConnection::Stub::PrepareAsyncIterationRaw(::grpc::ClientContext* context, const ::pacman_service::IterationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pacman_service::IterationReply>::Create(channel_.get(), cq, rpcmethod_Iteration_, context, request, false);
}

::grpc::Status PlayerConnection::Stub::End(::grpc::ClientContext* context, const ::pacman_service::EndRequest& request, ::pacman_service::EndReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_End_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pacman_service::EndReply>* PlayerConnection::Stub::AsyncEndRaw(::grpc::ClientContext* context, const ::pacman_service::EndRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pacman_service::EndReply>::Create(channel_.get(), cq, rpcmethod_End_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pacman_service::EndReply>* PlayerConnection::Stub::PrepareAsyncEndRaw(::grpc::ClientContext* context, const ::pacman_service::EndRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pacman_service::EndReply>::Create(channel_.get(), cq, rpcmethod_End_, context, request, false);
}

PlayerConnection::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      PlayerConnection_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PlayerConnection::Service, ::pacman_service::ConnectRequest, ::pacman_service::ConnectReply>(
          std::mem_fn(&PlayerConnection::Service::Connect), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      PlayerConnection_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PlayerConnection::Service, ::pacman_service::StartRequest, ::pacman_service::StartReply>(
          std::mem_fn(&PlayerConnection::Service::Start), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      PlayerConnection_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PlayerConnection::Service, ::pacman_service::IterationRequest, ::pacman_service::IterationReply>(
          std::mem_fn(&PlayerConnection::Service::Iteration), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      PlayerConnection_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PlayerConnection::Service, ::pacman_service::EndRequest, ::pacman_service::EndReply>(
          std::mem_fn(&PlayerConnection::Service::End), this)));
}

PlayerConnection::Service::~Service() {
}

::grpc::Status PlayerConnection::Service::Connect(::grpc::ServerContext* context, const ::pacman_service::ConnectRequest* request, ::pacman_service::ConnectReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerConnection::Service::Start(::grpc::ServerContext* context, const ::pacman_service::StartRequest* request, ::pacman_service::StartReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerConnection::Service::Iteration(::grpc::ServerContext* context, const ::pacman_service::IterationRequest* request, ::pacman_service::IterationReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerConnection::Service::End(::grpc::ServerContext* context, const ::pacman_service::EndRequest* request, ::pacman_service::EndReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pacman_service

